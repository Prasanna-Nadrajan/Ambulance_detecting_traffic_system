# requirements.txt
opencv-python==4.8.1.78
torch>=2.0.0
torchvision>=0.15.0
ultralytics>=8.0.0
numpy>=1.24.0
Pillow>=9.5.0
matplotlib>=3.7.0
seaborn>=0.12.0
pandas>=2.0.0
scikit-learn>=1.3.0
flask>=2.3.0
flask-socketio>=5.3.0
python-socketio>=5.8.0

---

# ambulance_dataset.yaml (for YOLO training)
path: ./ambulance_dataset  # dataset root dir
train: images/train  # train images (relative to 'path')
val: images/val  # val images (relative to 'path')
test: images/test  # test images (optional)

# Classes
names:
  0: ambulance

---

# config.yaml (system configuration)
system:
  model_path: "yolov8n.pt"
  confidence_threshold: 0.6
  emergency_duration: 30  # seconds
  max_detection_history: 100

camera:
  source: 0  # 0 for webcam, path for video file
  width: 1280
  height: 720
  fps: 30

traffic_signal:
  default_state: "RED"
  emergency_state: "GREEN"
  transition_delay: 2  # seconds

logging:
  level: "INFO"
  log_file: "system.log"
  max_file_size: 10  # MB
  backup_count: 5

api:
  host: "0.0.0.0"
  port: 5000
  debug: false

---

# docker-compose.yml (for containerized deployment)
version: '3.8'

services:
  ambulance-detection:
    build: .
    ports:
      - "5000:5000"
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
      - ./data:/app/data
    environment:
      - PYTHONUNBUFFERED=1
    devices:
      - /dev/video0:/dev/video0  # For webcam access
    restart: unless-stopped

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - ambulance-detection
    restart: unless-stopped

---

# Dockerfile
FROM python:3.9-slim

# Install system dependencies
RUN apt-get update && apt-get install -y \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libgthread-2.0-0 \
    libgtk-3-0 \
    python3-opencv \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Expose port
EXPOSE 5000

# Run the application
CMD ["python", "app.py"]

---

# .gitignore
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# Virtual environments
venv/
ENV/
env/
.venv/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Project specific
models/
*.pt
*.onnx
logs/
*.log
detection_log.json
ambulance_dataset/
sample_videos/
*.mp4
*.avi
*.mov

# Jupyter Notebooks
.ipynb_checkpoints

---

# setup.py
from setuptools import setup, find_packages

setup(
    name="ambulance-detection-system",
    version="1.0.0",
    description="AI-powered ambulance detection system for smart traffic control",
    author="Your Name",
    author_email="your.email@example.com",
    packages=find_packages(),
    install_requires=[
        "opencv-python>=4.8.1.78",
        "torch>=2.0.0",
        "torchvision>=0.15.0",
        "ultralytics>=8.0.0",
        "numpy>=1.24.0",
        "Pillow>=9.5.0",
        "matplotlib>=3.7.0",
        "flask>=2.3.0",
        "flask-socketio>=5.3.0",
    ],
    python_requires=">=3.8",
    classifiers=[
        "Development Status :: 3 - Alpha",
        "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
    ],
    entry_points={
        "console_scripts": [
            "ambulance-detector=main:main",
        ],
    },
)

---

# nginx.conf (for production deployment)
events {
    worker_connections 1024;
}

http {
    upstream app {
        server ambulance-detection:5000;
    }

    server {
        listen 80;
        
        location / {
            proxy_pass http://app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /socket.io/ {
            proxy_pass http://app;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}